/*
 * Copyright 2019 Bud Byrd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id "io.spring.dependency-management" version "1.0.7.RELEASE"
    id 'groovy'
    id 'maven-publish'
    id "com.jfrog.bintray" version "1.8.4"
}

group = 'com.budjb'
version = '0.1.0'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports { mavenBom("org.springframework.boot:spring-boot-dependencies:2.1.4.RELEASE") }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.codehaus.groovy:groovy'
    implementation 'org.codehaus.groovy:groovy-json'
    implementation 'org.slf4j:slf4j-api'
    implementation 'com.rabbitmq:amqp-client'
    implementation 'io.dropwizard.metrics:metrics-core'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.spockframework:spock-core:1.3-groovy-2.5'
    testImplementation 'org.spockframework:spock-spring:1.3-groovy-2.5'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        library(MavenPublication) {
            from components.java

            artifact sourcesJar
            artifact javadocJar

            groupId project.group
            artifactId project.name
            version project.version

            pom {
                name = project.name
                description = projectDescription
                url = githubHttpsUrl

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'budjb'
                        name = 'Bud Byrd'
                        email = 'bud.byrd@gmail.com'
                    }
                }
                scm {
                    url = githubHttpsUrl
                    connection = "scm:git:" + githubHttpsUrl + ".git"
                    developerConnection = "scm:git:" + githubHttpsUrl + ".git"
                }
                issueManagement {
                    system = 'GitHub Issues'
                    url = githubHttpsUrl + "/issues"
                }
            }
        }
    }
}

bintray {
    user = System.getenv(bintrayUsernameEnvVar)
    key = System.getenv(bintrayKeyEnvVar)
    publish = true

    pkg {
        websiteUrl = githubHttpsUrl
        issueTrackerUrl = "${githubHttpsUrl}/issues"
        vcsUrl = githubGitUrl
        githubRepo = 'budjb/spring-rabbitmq-multi-publish'

        desc = projectDescription
        labels = ['spring-boot', 'spring-framework']
        repo = 'spring'
        name = project.name
        licenses = ['Apache-2.0']
        publications = ['library']

        version {
            name = project.version
            released = new Date()
            vcsTag = project.version
            gpg {
                sign = true
                passphrase = System.getenv('GPG_PASSWORD')
            }
            mavenCentralSync {
                sync = true
                user = System.getenv(sonatypeUsernameEnvVar)
                password = System.getenv(sonatypePasswordEnvVar)
            }
        }
    }
}
